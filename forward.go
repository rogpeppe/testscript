package testscript

import (
	"testing"

	"github.com/rogpeppe/go-internal/testscript"
)

// generated by goforward github.com/rogpeppe/go-internal/testscript github.com/rogpeppe/testscript

// TestingM is implemented by *testing.M. It's defined as an interface
// to allow testscript to co-exist with other testing frameworks
// that might also wish to call M.Run.
type TestingM = testscript.TestingM

// IgnoreMissedCoverage causes any missed coverage information
// (for example when a function passed to RunMain
// calls os.Exit, for example) to be ignored.
// This function should be called before calling RunMain.
func IgnoreMissedCoverage() {
	testscript.IgnoreMissedCoverage()
}

// RunMain should be called within a TestMain function to allow
// subcommands to be run in the testscript context.
//
// The commands map holds the set of command names, each
// with an associated run function which should return the
// code to pass to os.Exit. It's OK for a command function to
// exit itself, but this may result in loss of coverage information.
//
// When Run is called, these commands will be available as
// testscript commands; note that these commands behave like
// commands run with the "exec" command: they set stdout
// and stderr, and can be run in the background by passing "&"
// as a final argument.
//
// This function returns an exit code to pass to os.Exit, after calling m.Run.
func RunMain(m TestingM, commands map[string]func() int) (exitCode int) {
	return testscript.RunMain(m, commands)
}

// Env holds the environment to use at the start of a test script invocation.
type Env = testscript.Env

// Params holds parameters for a call to Run.
type Params = testscript.Params

// RunDir runs the tests in the given directory. All files in dir with a ".txt"
// are considered to be test files.
func Run(t *testing.T, p Params) {
	testscript.Run(t, p)
}

// T holds all the methods of the *testing.T type that
// are used by testscript.
type T = testscript.T

// RunT is like Run but uses an interface type instead of the concrete *testing.T
// type to make it possible to use testscript functionality outside of go test.
func RunT(t T, p Params) {
	testscript.RunT(t, p)
}

// A TestScript holds execution state for a single test script.
type TestScript = testscript.TestScript
